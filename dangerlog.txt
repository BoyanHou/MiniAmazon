1. how to let the back-end communication part know, when the user operates on our fron-end website?
Our solution is to use SpringBoot's Dependency Injectino functionality, to initialize a Spring bean after the spring server is running, passing our communication modules into the web-appication's body.

2. how to deal with the fact that we only have one socket to world server and one socket to ups server, but we have to deal with multiple concurrent dialogs at the same time?
Our receiver daemon will receive and read the content of each received message and submit the processing task of our message-processing thread pool accorddingly.
Each dialog is tracked in a connectionless communication style: the message processor will get the identity and status of the dialog by reading a single message, and it will know what to do with it next.

3. how to notify a sender thread when its required ACK has arrived in the main thread?
We achieved this by utilizing the thread's' wait and notify functionalitiy. 

4. how to generate unique sequence number for every message sent by us?
We did this by using a SpringBoot service written by us called "getSeqNum" with synchronizations to generate increasing integers for this purpose.

5. how to avoid rendering the view with dulicated code in our controller?
Every time we want to redenr a specific view, redirect to a specific controller

6. how to record the status of each warehouse, i.e. how many products are there in each warehouse?
We persisted the status of each warehouse in the database, so that we can keep track of each warehouse's stock information

7. how to guarantee user input, such as integer & null input, can be dealt with in our web server?
We focused on this issue in the service modules, we will throw and catch a dosen of exceptions for this specific issue
